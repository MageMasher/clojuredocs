* App Goals
+ Find var doc & examples when you know exactly what you're looking for
  + optimize for speed
+ Find things when you don't know what you're looking for
  + see alsos
  + namespace nav
  + quickref / area (string manipulation)
  + concept (I want to do x)
+ Mobile: main use case as linked-to from blog posts and such
  + think about removing all the extra parts for mobile
+ Site experience
  + Must be *robust and snappy*. Perception of a language is
    often tied to factors out of that language's control, e.g. network
    congestion, non-optimized css transitions, etc. A quick and
    responsive experience is a top goal of the site.

** Non-goals (ATM)
+ How-tos on web app | desktop | mobile
+ Libraries?


* Release Checklist

+ Move over from old db
+ Claiming old user accounts
+ Core-specific namespace page
  + tags / sections w/ filtering
+ Add user page
+ Add example widget
+ Redirect old urls to new
+ Clean data export for dev distribution
+ Mobile comb-through
+ Add notes widget
+ Jobs
+ Admin interface
  + What goes here?
+ Organize ns decls
+ Refactor examples and see alsos lookup for autocomplete results
+ Exception reporting
+ Split-screen example editing
+ Editing examples


** Done
+ Deleting examples
+ Switch to avatar url instead of email
+ Add libraries page
+ Show no results state for search
+ Add number of examples to autocomplete
+ Loading state on search inputs should show immediately on input
+ Var page navigation
+ Mobile slide-out menu
+ Redirect old versioned var urls
+ Rename comments -> notes
+ Null-state for top contribs
+ Fix login redirects to current page
+ Move over comments
+ UPDATE / REMOVE ROBOTS.TXT
+ Check db indexes
+ Move example submission styleguide over
+ Landing search feedback
+ Expand and redirect shortened namespaces
+ Handle abbreviated namespaces `c.c` -> `clojure.core`
+ Landing search feedback
+ User accounts page
+ Fingerprint & caching on assets
+ CLJS refactor
+ Better throttling for search widgets
+ Staging site header
+ Source link on var page
+ See alsos rendering
+ Fix footer on mobile
+ Update clojure tutorials
+ Encode clojure names for urls
+ Disable input until js loads
+ Example history page
+ Footer
+ GH / Twitter links in footer
+ Switch sass -> less
+ Quickref attribution
+ Consistent h3 styling on quickref page
+ Float quickref TOC
+ Quick lookup in top bar
+ Namespace sidebar on var page
+ Use ssl for external resources
+ Landing page search widget
+ Loading indicator on search widget
+ Add recently viewed vars to sidebar
+ Animate scroll-to links

** Punt
+ ClojureScript / Clojure.NET support
+ URL shortener howto
+ Investigate bitbucket login
+ Quickref update
+ Supported libs blurb


* Indexes
+ namespaces
  + name
+ vars
  + name
  + ns
  + library-url
+ see-alsos
  + name
  + ns
  + library-url
+ libraries
  + namespaces
+ examples
  + name
  + ns
  + library-url
+ var-notes
  + var (ns name library-url)


* Import

+ Idempotency
+ Users
  + Construct avatar url
+ Vars
  + Import on startup


* Admin

+ Jobs overview


* API gen

Let's see if we can declaratively define our endpoints:

+ routing -- server & client
+ db querying -- server
+ input coercion / transformation -- server
+ validation -- server & client
+ data querying / storage -- server
+ error handling -- server & client
  + failed validations
    + 422 :general-error, :prop-errors
+ response transformation -- server
+ authorizaton -- server

+ Server
  + routing
  + db querying
  + db storage
  + validation
  + error handling
  + response transformation
  + authorization

+ Client
  + routing
  + validation
  + failed validation reporting


It would be nice if both the client call functions and endpoint
generation could be done off of the same data.

Single-field validation, form submit -> routing -> input coercion

(client-call schema context success error)


* App Layout

** Clj
+ Config
+ Init
+ Client API
+ Page Rendering
+ Comps
+ Data Access

** Cljs
+ Server Comm
+ Widgets
+ Cross components
+ Routing?


** pages.clj / pages subdir

Used to house all page rendering logic. Adding a page? The route /
logic should probably go in pages.clj. If the logic for rendering your
page needs a bunch of supporting functions, or if there are many pages
that should all be grouped logically, consider adding a namespace to
the pages subdir (see search feedback routes, for example). Routes
should only be added to pages.clj unless you really, really need to
handle routing in your namespace.


* Examples / Example History

+ Use Cases
  + View example -- Show author / editors in example meta, and latest
    edit body and last updated timestamp
  +
